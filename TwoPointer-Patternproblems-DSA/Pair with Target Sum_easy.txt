Given an array of numbers sorted in ascending order and a target sum, find a pair in the array whose sum is equal to the given target.

Write a function to return the indices of the two numbers (i.e. the pair) such that they add up to the given target. If no such pair exists return [-1, -1].

Example 1:

Input: [1, 2, 3, 4, 6], target=6
Output: [1, 3]
Explanation: The numbers at index 1 and 3 add up to 6: 2+4=6

Example 2:

Input: [2, 5, 9, 11], target=11
Output: [0, 2]
Explanation: The numbers at index 0 and 2 add up to 11: 2+9=11


Constraints:
2 <= arr.length <= 104
-109 <= arr[i] <= 109
-109 <= target <= 109
Only one valid answer exists.

=========================================================================================================================================================================
Nested loops Approach:

class Solution {
  public static int[] search(int[] arr, int targetSum) {
    // TODO: Write your code here
    for(int i=0;i<arr.length-1;i++)
    {
      for(int j=i+1;j<arr.length-1;j++)
      {
        if(arr[i]+arr[j]==targetSum)
        {
          return new int[] {i,j};
        }
      }
    }
    return new int[] { -1, -1 };
  }
}

Time Complexity: O(n^2)
Space complexity: O(1)

===========================================================================================================================================================================
Two Pointers Approach:

class Solution {

public int[] search(int[] arr, int targetSum) {
  int left = 0, right = arr.length - 1;
  while (left < right) {
    int currentSum = arr[left] + arr[right];
    if (currentSum == targetSum)
        return new int[] { left, right }; // found the pair

    if (targetSum > currentSum)
        left++; // we need a pair with a bigger sum
    else
        right--; // we need a pair with a smaller sum
  }
  return new int[] { -1, -1 };
}

Time Complexity: O(n)
Space complexity: O(1)
Similar to the nested loop approach, there are no additional data structures used, so it does not need extra space beyond the input array.

==========================================================================================================================================

Both the above approaches execute and pass all of the test cases. I have used the first approach but in the question it is clearly mentioned that the array is sorted. 
So there is no need to loop/check every possible condition of the pairs. As we need to find only a pair its better we choose 2-pointer approach as it reduces Time complexity of the problem.

Recognizing the Two-Pointer Technique
In a two-pointer technique:

1.You work with two indices (pointers) instead of using nested loops.
2.These pointers start at different positions and move towards each other based on specific conditions.
3.It's often used in sorted arrays or strings where elements are progressively checked in pairs, and you decide which pointer to move based on the conditions in the problem.




