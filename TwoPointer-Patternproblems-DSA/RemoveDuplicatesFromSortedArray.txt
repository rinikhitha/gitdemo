class Solution {
    public int removeDuplicates(int[] nums) {
// Approach 1 Brute force - Using Hash Set to store elements which are unique but the space complexity will be O(N). Time complexity is O(N)
//        HashSet<Integer> seen = new HashSet<>();
//               int j=0;//[1,2,3,4,4]

//         for(int i=0;i<nums.length;i++)
//         {
//             // Check if the element is not in the HashSet
//          if (!seen.contains(nums[i])) 
//          {
//         // Add the element to the HashSet
//         seen.add(nums[i]);
//         // Copy the element to the nextNonDuplicate position
//         nums[j] = nums[i];
//         // Increment the index of the next non-duplicate element
//         j++;

//             }   
//         }
//         return j;
        
//     }
// } 






//Approach 2 Optimal solution :Given that array is sorted so we use 2 pointers approach 
        //j is for pointing to nextNonDuplicate
        //Time Complexity is:O(N)
        //Space Complexity is : O(1)
        int j=1;//[1,2,3,4,4]

        for(int i=1;i<nums.length;i++)
        {
            if(nums[j-1]!=nums[i])
            //arr[1-1]!=arr[1] -> move j pointer but before that let the element stay/save in the array
            {
                nums[j]=nums[i];//arr[1]=arr[1]//arr[1]=2 our array will have [1,2]
                j++;//

            }   
        }
        return j;
        
    }
}